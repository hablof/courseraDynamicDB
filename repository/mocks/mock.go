// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	internal "hw6coursera/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExplorer is a mock of Explorer interface.
type MockExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockExplorerMockRecorder
}

// MockExplorerMockRecorder is the mock recorder for MockExplorer.
type MockExplorerMockRecorder struct {
	mock *MockExplorer
}

// NewMockExplorer creates a new mock instance.
func NewMockExplorer(ctrl *gomock.Controller) *MockExplorer {
	mock := &MockExplorer{ctrl: ctrl}
	mock.recorder = &MockExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplorer) EXPECT() *MockExplorerMockRecorder {
	return m.recorder
}

// GetColumns mocks base method.
func (m *MockExplorer) GetColumns(tableName string) ([]internal.Column, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumns", tableName)
	ret0, _ := ret[0].([]internal.Column)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockExplorerMockRecorder) GetColumns(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockExplorer)(nil).GetColumns), tableName)
}

// GetTableNames mocks base method.
func (m *MockExplorer) GetTableNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableNames indicates an expected call of GetTableNames.
func (mr *MockExplorerMockRecorder) GetTableNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableNames", reflect.TypeOf((*MockExplorer)(nil).GetTableNames))
}

// MockRecordManager is a mock of RecordManager interface.
type MockRecordManager struct {
	ctrl     *gomock.Controller
	recorder *MockRecordManagerMockRecorder
}

// MockRecordManagerMockRecorder is the mock recorder for MockRecordManager.
type MockRecordManagerMockRecorder struct {
	mock *MockRecordManager
}

// NewMockRecordManager creates a new mock instance.
func NewMockRecordManager(ctrl *gomock.Controller) *MockRecordManager {
	mock := &MockRecordManager{ctrl: ctrl}
	mock.recorder = &MockRecordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordManager) EXPECT() *MockRecordManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordManager) Create(table internal.Table, data map[string]interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", table, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecordManagerMockRecorder) Create(table, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordManager)(nil).Create), table, data)
}

// DeleteById mocks base method.
func (m *MockRecordManager) DeleteById(table internal.Table, primaryKey string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", table, primaryKey, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockRecordManagerMockRecorder) DeleteById(table, primaryKey, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockRecordManager)(nil).DeleteById), table, primaryKey, id)
}

// GetAllRecords mocks base method.
func (m *MockRecordManager) GetAllRecords(table internal.Table, limit, offset int) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords", table, limit, offset)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecords indicates an expected call of GetAllRecords.
func (mr *MockRecordManagerMockRecorder) GetAllRecords(table, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockRecordManager)(nil).GetAllRecords), table, limit, offset)
}

// GetById mocks base method.
func (m *MockRecordManager) GetById(table internal.Table, primaryKey string, id int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", table, primaryKey, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRecordManagerMockRecorder) GetById(table, primaryKey, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRecordManager)(nil).GetById), table, primaryKey, id)
}

// UpdateById mocks base method.
func (m *MockRecordManager) UpdateById(table internal.Table, primaryKey string, id int, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", table, primaryKey, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockRecordManagerMockRecorder) UpdateById(table, primaryKey, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockRecordManager)(nil).UpdateById), table, primaryKey, id, data)
}
